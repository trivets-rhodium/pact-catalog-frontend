(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('minisearch'), require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'minisearch', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["react-minisearch"] = {}, global.MiniSearch, global.React));
})(this, (function (exports, MiniSearch, React) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var MiniSearch__default = /*#__PURE__*/_interopDefaultLegacy(MiniSearch);
    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function useMiniSearch(documents, options) {
        var optionsRef = React.useRef(options);
        var miniSearchRef = React.useRef(new MiniSearch__default["default"](options));
        var documentByIdRef = React.useRef({});
        var _a = React.useState(null), rawResults = _a[0], setRawResults = _a[1];
        var _b = React.useState(null), searchResults = _b[0], setSearchResults = _b[1];
        var _c = React.useState(null), suggestions = _c[0], setSuggestions = _c[1];
        var _d = React.useState(false), isIndexing = _d[0], setIsIndexing = _d[1];
        var utils = React.useMemo(function () {
            var miniSearch = miniSearchRef.current;
            var documentById = documentByIdRef.current;
            var options = optionsRef.current;
            var idField = options.idField || MiniSearch__default["default"].getDefault('idField');
            var extractField = options.extractField || MiniSearch__default["default"].getDefault('extractField');
            var gatherById = function (documents) { return documents.reduce(function (byId, doc) {
                var id = extractField(doc, idField);
                byId[id] = doc;
                return byId;
            }, {}); };
            var search = function (query, searchOptions) {
                var results = miniSearch.search(query, searchOptions);
                var searchResults = results.map(function (_a) {
                    var id = _a.id;
                    return documentById[id];
                });
                setSearchResults(searchResults);
                setRawResults(results);
            };
            var autoSuggest = function (query, searchOptions) {
                var suggestions = miniSearch.autoSuggest(query, searchOptions);
                setSuggestions(suggestions);
            };
            var add = function (document) {
                documentByIdRef.current[extractField(document, idField)] = document;
                miniSearch.add(document);
            };
            var addAll = function (documents) {
                var byId = gatherById(documents);
                documentByIdRef.current = Object.assign(documentById, byId);
                miniSearch.addAll(documents);
            };
            var addAllAsync = function (documents, options) {
                var byId = gatherById(documents);
                documentByIdRef.current = Object.assign(documentById, byId);
                setIsIndexing(true);
                return miniSearch.addAllAsync(documents, options || {}).then(function () {
                    setIsIndexing(false);
                });
            };
            var remove = function (document) {
                miniSearch.remove(document);
                documentByIdRef.current = removeFromMap(documentById, extractField(document, idField));
            };
            var removeById = function (id) {
                var document = documentById[id];
                if (document == null) {
                    throw new Error("react-minisearch: document with id ".concat(id, " does not exist in the index"));
                }
                miniSearch.remove(document);
                documentByIdRef.current = removeFromMap(documentById, id);
            };
            var removeAll = function (documents) {
                if (arguments.length === 0) {
                    miniSearch.removeAll();
                    documentByIdRef.current = {};
                }
                else {
                    miniSearch.removeAll(documents);
                    var idsToRemove = documents.map(function (doc) { return extractField(doc, idField); });
                    documentByIdRef.current = removeManyFromMap(documentById, idsToRemove);
                }
            };
            var discard = function (id) {
                miniSearch.discard(id);
                documentByIdRef.current = removeFromMap(documentById, id);
            };
            var discardAll = function (ids) {
                miniSearch.discardAll(ids);
                documentByIdRef.current = removeManyFromMap(documentById, ids);
            };
            var replace = function (document) {
                miniSearch.replace(document);
                documentByIdRef.current[extractField(document, idField)] = document;
            };
            var clearSearch = function () {
                setSearchResults(null);
                setRawResults(null);
            };
            var clearSuggestions = function () {
                setSuggestions(null);
            };
            return {
                search: search,
                autoSuggest: autoSuggest,
                add: add,
                addAll: addAll,
                addAllAsync: addAllAsync,
                remove: remove,
                removeById: removeById,
                removeAll: removeAll,
                discard: discard,
                discardAll: discardAll,
                replace: replace,
                clearSearch: clearSearch,
                clearSuggestions: clearSuggestions,
                miniSearch: miniSearch
            };
        }, []);
        React.useEffect(function () {
            utils.addAll(documents);
            return function () {
                utils.removeAll(documents);
            };
        }, [utils, documents]);
        return __assign(__assign({ searchResults: searchResults, rawResults: rawResults, suggestions: suggestions, isIndexing: isIndexing }, utils), { removeById: utils.discard });
    }
    function removeFromMap(map, keyToRemove) {
        delete map[keyToRemove];
        return map;
    }
    function removeManyFromMap(map, keysToRemove) {
        keysToRemove.forEach(function (keyToRemove) {
            delete map[keyToRemove];
        });
        return map;
    }
    function getDisplayName(Component) {
        return Component.displayName || Component.name || 'Component';
    }
    function withMiniSearch(documents, options, Component) {
        var WithMiniSearch = function (props) {
            var miniSearchProps = useMiniSearch(documents, options);
            return React__default["default"].createElement(Component, __assign({}, miniSearchProps, props));
        };
        WithMiniSearch.displayName = "WithMiniSearch(".concat(getDisplayName(Component), ")");
        return WithMiniSearch;
    }
    var WithMiniSearch = function (_a) {
        var documents = _a.documents, options = _a.options, children = _a.children;
        var miniSearchProps = useMiniSearch(documents, options);
        return children(miniSearchProps);
    };

    exports.WithMiniSearch = WithMiniSearch;
    exports.useMiniSearch = useMiniSearch;
    exports.withMiniSearch = withMiniSearch;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=react-minisearch.js.map
